# -*- coding: utf-8 -*-
"""CarCounting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bV2nFmvTsLy-7nlUumAyLC2fL20HRZdf

## **Get and Process the DATA**
"""

USER_NAME = "HastingsJi" 

USER_EMAIL = "hastings.jyn@gmail.com" 

TOKEN = "82f36da353fdb5cd0ac73c0493817b869f5c1b24" 

!git clone https://{USER_NAME}:{TOKEN}@github.com/{USER_NAME}/IoTProjectData.git
# %cd IoTProjectData

import os
from scipy.spatial import distance as dist
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import argparse
import glob
import cv2

list_dir = os.listdir("./testdata")

folders = []
for f in list_dir:
    if f == '.DS_Store' or f == 'loop.py':
        continue
    folders.append(f)


sameCars = [] # pairs
#compare same
for f in folders:
    cur_imgs = os.listdir('./testdata/'+f)
    for i in range(len(cur_imgs)-1):
        for j in range(i+1,len(cur_imgs)):
            if cur_imgs[i].startswith('.') or cur_imgs[j].startswith('.'):
                continue
            sameCars.append(('./testdata/'+f+'/'+cur_imgs[i],'./testdata/'+f+'/'+cur_imgs[j]))

differentCars = []
# compare different
for i in range(len(folders)-1):
    for j in range(i+1,len(folders)):
        f1 = folders[i]
        f2 = folders[j]
        f1_imgs = os.listdir('./testdata/'+f1)
        f2_imgs = os.listdir('./testdata/'+f2)
        for f1_i in range(len(f1_imgs)):
            for f2_j in range(len(f2_imgs)):
                if f1_imgs[f1_i].startswith('.') or f2_imgs[f2_j].startswith('.'):
                    continue 
                differentCars.append(('./testdata/'+f1+'/'+f1_imgs[f1_i],'./testdata/'+f2+'/'+f2_imgs[f2_j]))

"""**Same Car **"""

print (sameCars[0])
fig=plt.figure(figsize=(8, 8))
fig.add_subplot(1, 2, 1)
img=mpimg.imread('./same_cars/folder17/2.jpg')
plt.imshow(img)
plt.axis('off')


fig.add_subplot(1, 2, 2)
img=mpimg.imread('./same_cars/folder17/3.jpg')
plt.imshow(img)
plt.axis('off')
plt.show()

"""**Different Car**"""

print (differentCars[:10])
fig=plt.figure(figsize=(8, 8))
fig.add_subplot(1, 2, 1)
img=mpimg.imread('./same_cars/folder17/2.jpg')
plt.imshow(img)
plt.axis('off')

fig.add_subplot(1, 2, 2)
img=mpimg.imread('./same_cars/folder3/2.jpg')
plt.imshow(img)
plt.axis('off')
plt.show()

# img = kimage.load_img('./same_cars/folder3/2.jpg')
# x = kimage.img_to_array(img)
# print (x.shape)
# img=mpimg.imread('./same_cars/folder3/2.jpg')
# print (img.shape)

"""##**Back Ground Subtraction**"""

CANNY_THRESH_1 = 110
CANNY_THRESH_2 = 140
ROW=3
COL=5
fig=plt.figure(figsize=(8, 8))
index = 1
imagePaths = ['./same_cars/folder17/2.jpg','./same_cars/folder3/2.jpg','./same_cars/folder3/3.jpg']
for imagePath in imagePaths:
  fig.add_subplot(ROW, COL, index)
  img=mpimg.imread(imagePath)
  plt.axis('off')
  plt.imshow(img); index+=1
  gray = cv2.cvtColor(img.copy(),cv2.COLOR_BGR2GRAY)
  fig.add_subplot(ROW, COL, index)
  plt.imshow(gray); index+=1
  plt.axis('off')
  edges = cv2.Canny(img, CANNY_THRESH_1, CANNY_THRESH_2)
  fig.add_subplot(ROW, COL, index)
  plt.imshow(edges); index+=1
  plt.axis('off')
  edges = cv2.dilate(edges, None)
  fig.add_subplot(ROW, COL, index)
  plt.imshow(edges); index+=1
  plt.axis('off')
  edges = cv2.erode(edges, None)
  fig.add_subplot(ROW, COL, index)
  plt.imshow(edges); index+=1
  plt.axis('off')
  

plt.show()

"""**EXAMPLE - Preprocess the images with background subtraction **"""

BLUR = 21
MASK_DILATE_ITER = 10
MASK_ERODE_ITER = 5
MASK_COLOR = (0.0,0.0,0.0) # In BGR format

fig=plt.figure(figsize=(8, 8))
fig.add_subplot(3, 8, 1)
img=mpimg.imread('./testdata/1/Jietu20181214-161224.jpg')
plt.axis('off')
plt.imshow(img)
gray = cv2.cvtColor(img.copy(),cv2.COLOR_BGR2GRAY)




gray_blur = cv2.GaussianBlur(gray, (15, 15), 0)
fig.add_subplot(3, 8, 2)
plt.imshow(gray_blur)
plt.axis('off')

fig.add_subplot(3, 8, 3)
plt.axis('off')
thresh = cv2.adaptiveThreshold(gray_blur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
cv2.THRESH_BINARY_INV, 11, 1)
plt.imshow(thresh)

fig.add_subplot(3, 8, 4)
plt.axis('off')
kernel = np.ones((3, 3), np.uint8)
closing = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel, iterations=3)
plt.imshow(closing)

fig.add_subplot(3, 8, 5)
plt.axis('off')
cont_img = closing.copy()
_, contours, _ = cv2.findContours(cont_img, cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)

contours = sorted(contours, key=cv2.contourArea, reverse=True)

print (len(contours))
cnt=img.copy()
cv2.drawContours(cnt, contours[0], -1, 255, 3)
plt.imshow(cnt)

fig.add_subplot(3, 8, 6)
plt.axis('off')
mask = np.zeros(gray.shape)
cv2.fillConvexPoly(mask, contours[0], (255))
mask = cv2.erode(mask, None, iterations=MASK_ERODE_ITER)
mask = cv2.GaussianBlur(mask, (BLUR, BLUR), 0)

plt.imshow(mask)

fig.add_subplot(3, 8, 7)
plt.axis('off')
mask_stack = np.dstack([mask]*3) 
mask_stack  = mask_stack.astype('float32') / 255.0          # Use float matrices, 
imgC         = img.copy().astype('float32') / 255.0                 #  for easy blending

masked = (mask_stack * imgC) + ((1-mask_stack) * MASK_COLOR) # Blend
masked = (masked * 255).astype('uint8')                     # Convert back to 8-bit 

plt.imshow(masked)


fig.add_subplot(3, 8, 8)
plt.axis('off')
tmp = cv2.cvtColor(masked, cv2.COLOR_BGR2GRAY)
_,alpha = cv2.threshold(tmp,50,255,cv2.THRESH_BINARY)
b, g, r = cv2.split(masked)

rgba = [b,g,r, alpha]
dst = cv2.merge(rgba,4)
image = cv2.cvtColor(dst, cv2.COLOR_BGR2RGB)
plt.imshow(dst)

print (image.shape)

plt.show()

"""**FUNCTION - Preprocess the images with background subtraction **"""

BLUR = 21
MASK_DILATE_ITER = 10
MASK_ERODE_ITER = 5
MASK_COLOR = (0.0,0.0,0.0)
def preProcess(imgPath):
  img=mpimg.imread(imgPath)
  gray = cv2.cvtColor(img.copy(),cv2.COLOR_BGR2GRAY)
  gray_blur = cv2.GaussianBlur(gray, (15, 15), 0)
  thresh = cv2.adaptiveThreshold(gray_blur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY_INV, 11, 1)
  
  kernel = np.ones((3, 3), np.uint8)
  closing = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel, iterations=3)
  cont_img = closing.copy()
  _, contours, _ = cv2.findContours(cont_img, cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
  contours = sorted(contours, key=cv2.contourArea, reverse=True)
  mask = np.zeros(gray.shape)
  cv2.fillConvexPoly(mask, contours[0], (255))
  mask = cv2.erode(mask, None, iterations=MASK_ERODE_ITER)
  mask = cv2.GaussianBlur(mask, (BLUR, BLUR), 0)
  mask_stack = np.dstack([mask]*3) 
  mask_stack  = mask_stack.astype('float32') / 255.0         
  imgC         = img.copy().astype('float32') / 255.0               
#   print (imgPath)
  masked = (mask_stack * imgC[...,:3]) + ((1-mask_stack) * MASK_COLOR) 
  masked = (masked * 255).astype('uint8')     
  tmp = cv2.cvtColor(masked, cv2.COLOR_BGR2GRAY)
  _,alpha = cv2.threshold(tmp,50,255,cv2.THRESH_BINARY)
  b, g, r = cv2.split(masked)

  rgba = [b,g,r, alpha]
  dst = cv2.merge(rgba,4)
  image = cv2.cvtColor(dst, cv2.COLOR_BGR2RGB)
  hist = cv2.calcHist([image], [0, 1, 2], None, [8, 8, 8],[0, 256, 0, 256, 0, 256])
  hist = cv2.normalize(hist,hist).flatten()
  
  return dst,hist,image

# fig=plt.figure(figsize=(8, 8))
# fig.add_subplot(3, 5, 1)
# dst,hist=preProcess('./same_cars/folder3/2.jpg')
# plt.imshow(dst)
# plt.axis('off')
# plt.show()

"""## **Color Histogram Correlation**

### Evaluation without background subtraction
"""

dic={'same':sameCars, 'different':differentCars}



def processImg(imgPath):
    image = cv2.imread(imgPath)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    hist = cv2.calcHist([image], [0, 1, 2], None, [8, 8, 8],[0, 256, 0, 256, 0, 256])
    hist = cv2.normalize(hist,hist).flatten()
    return hist

def run():
    same_same=[]
    same_different=[]
    # same car while classified as same 
    different_same=[]
    different_different=[]
    for k,v in dic.items():
        for imgs in v:
          try:
            hist0=processImg(imgs[0])
            hist1=processImg(imgs[1])
            d = cv2.compareHist(hist0, hist1, cv2.HISTCMP_CORREL)
            if k=='same':

              same_same.append(d)
            else:

              different_different.append(d)
          except: pass


    return same_same, different_different


same_same, different_different = run()

print (len(same_same), len(different_different))

from scipy.stats import norm

mu,std=norm.fit(same_same)
x=np.linspace(0,1,100)
p=norm.pdf(x,mu,std)
plt.plot(x,p,'g',linewidth=2,label='same')
# plt.hist(same_same, bins=25, density=True, alpha=0.6, color='g')

mu2,std2=norm.fit(different_different)
x=np.linspace(0,1,100)
p2=norm.pdf(x,mu2,std2)
plt.plot(x,p2,'b',linewidth=2,label='different')
# plt.hist(different_different, bins=25, density=True, alpha=0.6, color='b')

plt.show()

threshold = 0.81
cnt=0
TruePositive,FalseNegative,TrueNegative,FalsePositive=0,0,0,0
for same in same_same:
  if same > threshold:
    TruePositive+=1
  else:
    FalseNegative+=1
for dif in different_different:
  if dif < threshold:
    TrueNegative+=1
  else:
    FalsePositive+=1
    
Precision = TruePositive/(TruePositive+FalsePositive)
Recall = TruePositive/(TruePositive+FalseNegative)


print ('Precision :',Precision)
print ('Recall :',Recall)


import seaborn as sn
import pandas as pd
import matplotlib.pyplot as plt

array = [[TruePositive,FalsePositive],
         [FalseNegative,TrueNegative]]        
df_cm = pd.DataFrame(array, ['Predicted condition positive','Predicted condition negative'],
                    ['Condition positive','Condition negative'])
#plt.figure(figsize = (10,7))
sn.set(font_scale=1.4)#for label size
sn.heatmap(df_cm, annot=True,annot_kws={"size": 16})# font size

"""### Evaluation with background subtraction"""

def processImg(imgPath):
    dst,hist,image=preProcess(imgPath)
    return hist

def run():
    same_same=[]
    same_different=[]
    different_same=[]
    different_different=[]
    for k,v in dic.items():
        for imgs in v:
          try:
            hist0=processImg(imgs[0])
            hist1=processImg(imgs[1])
            d = cv2.compareHist(hist0, hist1, cv2.HISTCMP_CORREL)
            if k=='same':

              same_same.append(d)
            else:

              different_different.append(d)
          except: pass


    return same_same, different_different


same_same, different_different = run()

from scipy.stats import norm

mu,std=norm.fit(same_same)
x=np.linspace(0,1,100)
p=norm.pdf(x,mu,std)
plt.plot(x,p,'g',linewidth=2,label='same')
# plt.hist(same_same, bins=25, density=True, alpha=0.6, color='g')

mu2,std2=norm.fit(different_different)
x=np.linspace(0,1,100)
p2=norm.pdf(x,mu2,std2)
plt.plot(x,p2,'b',linewidth=2,label='different')
# plt.hist(different_different, bins=25, density=True, alpha=0.6, color='b')

plt.show()

threshold = 0.9
cnt=0
TruePositive,FalseNegative,TrueNegative,FalsePositive=0,0,0,0
for same in same_same:
  if same > threshold:
    TruePositive+=1
  else:
    FalseNegative+=1
for dif in different_different:
  if dif < threshold:
    TrueNegative+=1
  else:
    FalsePositive+=1
    
Precision = TruePositive/(TruePositive+FalsePositive)
Recall = TruePositive/(TruePositive+FalseNegative)


print ('Precision :',Precision)
print ('Recall :',Recall)



array = [[TruePositive,FalsePositive],
         [FalseNegative,TrueNegative]]        
df_cm = pd.DataFrame(array, ['Predicted condition positive','Predicted condition negative'],
                    ['Condition positive','Condition negative'])
#plt.figure(figsize = (10,7))
sn.set(font_scale=1.4)#for label size
sn.heatmap(df_cm, annot=True,annot_kws={"size": 16})# font size

"""## VGG transfer learning (feature extraction)

### Without Background Subtraction
"""

from keras.applications import VGG16
from keras.preprocessing import image as kimage
from keras.applications.vgg16 import preprocess_input

model = VGG16(include_top=False, weights='imagenet')


def featureExtract(imgPath):
  img = kimage.load_img(imgPath, target_size=(60, 60))
  x = kimage.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  x = preprocess_input(x)

  pred = model.predict(x)
  return pred.ravel()

"""#### Distance Correlation Comparison"""

sameCarsFeatures=[]

for pair in sameCars:
  sameCarsFeatures.append([featureExtract(pair[0]),featureExtract(pair[1])] )



differentCarsFeatures=[]
for pair in differentCars:
  differentCarsFeatures.append(([featureExtract(pair[0]),featureExtract(pair[1])] ))

from scipy.spatial.distance import correlation

same=[]
different=[]
for pair in sameCarsFeatures:
  same.append(correlation(pair[0],pair[1]))

for pair in differentCarsFeatures:
  different.append(correlation(pair[0], pair[1]))

print (same[:10])
# print (correlation(dataset1[0],dataset1[1]))

fig = plt.figure()
mu,std=norm.fit(same)
x=np.linspace(0,1,100)
p=norm.pdf(x,mu,std)
plt.plot(x,p,'g',linewidth=2,label='same')
# plt.hist(same_same, bins=25, density=True, alpha=0.6, color='g')

mu2,std2=norm.fit(different)
x=np.linspace(0,1,100)
p2=norm.pdf(x,mu2,std2)
plt.plot(x,p2,'b',linewidth=2,label='different')
# plt.hist(different_different, bins=25, density=True, alpha=0.6, color='b')

ax = fig.gca()
# ax.set_xticks(np.arange(0, 1, 0.56))
plt.show()

threshold = 0.56
cnt=0
TruePositive,FalseNegative,TrueNegative,FalsePositive=0,0,0,0
for same in same:
  if same > threshold:
    TruePositive+=1
  else:
    FalseNegative+=1
for dif in different:
  if dif < threshold:
    TrueNegative+=1
  else:
    FalsePositive+=1
    
Precision = TruePositive/(TruePositive+FalsePositive)
Recall = TruePositive/(TruePositive+FalseNegative)


print ('Precision :',Precision)
print ('Recall :',Recall)



array = [[TruePositive,FalsePositive],
         [FalseNegative,TrueNegative]]        
df_cm = pd.DataFrame(array, ['Predicted condition positive','Predicted condition negative'],
                    ['Condition positive','Condition negative'])
#plt.figure(figsize = (10,7))
sn.set(font_scale=1.4)#for label size
sn.heatmap(df_cm, annot=True,annot_kws={"size": 16})# font size

"""#### SVM Correlation Comparison"""

dataset1=[]; target1=[]
for pair in sameCars:
  dataset1.append(np.concatenate((featureExtract(pair[0]), featureExtract(pair[1])), axis=0))
  target1.append(0)



for pair in differentCars:
  dataset1.append(np.concatenate((featureExtract(pair[0]), featureExtract(pair[1])), axis=0))
  target1.append(1)


dataset1= np.array(dataset1)
target1= np.array(target1)



print (dataset1.shape, target1.shape)

from sklearn.model_selection import train_test_split

# print (cancer.data.shape,cancer.target.shape)

X_train, X_test, y_train, y_test = train_test_split(dataset1, target1, test_size=0.3,random_state=19) # 70% training and 30% test
print (X_train.shape, y_train.shape)

from sklearn import svm

#Create a svm Classifier
clf = svm.SVC(kernel='linear') 

# clf = svm.SVC(kernel='rbf') 

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

TruePositive,FalseNegative,TrueNegative,FalsePositive=0,0,0,0


for i in range(len(y_test)):
  if y_test[i]==0:
    if y_pred[i]==0:
      TruePositive+=1
    else:
      FalseNegative+=1
  else:
    if y_pred[i]==1:
      TrueNegative+=1
    else:
      FalsePositive+=1

    
Precision = (TruePositive+1)/(1+TruePositive+FalsePositive)
Recall = TruePositive/(TruePositive+FalseNegative)


print ('Precision :',Precision)
print ('Recall :',Recall)



array = [[TruePositive,FalsePositive],
         [FalseNegative,TrueNegative]]        
df_cm = pd.DataFrame(array, ['Predicted condition positive','Predicted condition negative'],
                    ['Condition positive','Condition negative'])
#plt.figure(figsize = (10,7))
sn.set(font_scale=1.4)#for label size
sn.heatmap(df_cm, annot=True,annot_kws={"size": 16})# font size

"""##### Features Manipulation"""

dataset1=[]; target1=[]
for pair in sameCars:
  f1=featureExtract(pair[0])
  f2=featureExtract(pair[1])
  dataset1.append(np.concatenate((f1+f2, abs(f1-f2)), axis=0))
  target1.append(0)



for pair in differentCars:
  f1=featureExtract(pair[0])
  f2=featureExtract(pair[1])
  dataset1.append(np.concatenate((f1+f2, abs(f1-f2)), axis=0))
  target1.append(1)


dataset1= np.array(dataset1)
target1= np.array(target1)



print (dataset1.shape, target1.shape)

X_train, X_test, y_train, y_test = train_test_split(dataset1, target1, test_size=0.3,random_state=19) # 70% training and 30% test

clf = svm.SVC(kernel='linear') 

# clf = svm.SVC(kernel='rbf') 

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

TruePositive,FalseNegative,TrueNegative,FalsePositive=0,0,0,0


for i in range(len(y_test)):
  if y_test[i]==0:
    if y_pred[i]==0:
      TruePositive+=1
    else:
      FalseNegative+=1
  else:
    if y_pred[i]==1:
      TrueNegative+=1
    else:
      FalsePositive+=1

    
Precision = (TruePositive+1)/(1+TruePositive+FalsePositive)
Recall = TruePositive/(TruePositive+FalseNegative)


print ('Precision :',Precision)
print ('Recall :',Recall)



array = [[TruePositive,FalsePositive],
         [FalseNegative,TrueNegative]]        
df_cm = pd.DataFrame(array, ['Predicted condition positive','Predicted condition negative'],
                    ['Condition positive','Condition negative'])
#plt.figure(figsize = (10,7))
sn.set(font_scale=1.4)#for label size
sn.heatmap(df_cm, annot=True,annot_kws={"size": 16})# font size



"""### With Background Subtraction

#### Distance Correlation
"""

def featureExtract(imgPath):
  dst,hist,x=preProcess(imgPath)
  x = cv2.resize(x, (60, 60)) 
  x = np.expand_dims(x, axis=0)
  x = preprocess_input(x)

  pred = model.predict(x)
  return pred.ravel()

sameCarsFeatures=[]

for pair in sameCars:
  try:
    sameCarsFeatures.append([featureExtract(pair[0]),featureExtract(pair[1])] )
  except: pass

differentCarsFeatures=[]
for pair in differentCars:
  try:
    differentCarsFeatures.append(([featureExtract(pair[0]),featureExtract(pair[1])] ))
  except: pass

same=[]
different=[]
for pair in sameCarsFeatures:
  same.append(correlation(pair[0],pair[1]))

for pair in differentCarsFeatures:
  different.append(correlation(pair[0], pair[1]))

fig = plt.figure()
mu,std=norm.fit(same)
x=np.linspace(0,1,100)
p=norm.pdf(x,mu,std)
plt.plot(x,p,'g',linewidth=2,label='same')
# plt.hist(same_same, bins=25, density=True, alpha=0.6, color='g')

mu2,std2=norm.fit(different)
x=np.linspace(0,1,100)
p2=norm.pdf(x,mu2,std2)
plt.plot(x,p2,'b',linewidth=2,label='different')
# plt.hist(different_different, bins=25, density=True, alpha=0.6, color='b')

ax = fig.gca()
# ax.set_xticks(np.arange(0, 1, 0.57))
plt.show()

threshold = 0.57
cnt=0
TruePositive,FalseNegative,TrueNegative,FalsePositive=0,0,0,0
for same in same:
  if same > threshold:
    TruePositive+=1
  else:
    FalseNegative+=1
for dif in different:
  if dif < threshold:
    TrueNegative+=1
  else:
    FalsePositive+=1
    
Precision = TruePositive/(TruePositive+FalsePositive)
Recall = TruePositive/(TruePositive+FalseNegative)


print ('Precision :',Precision)
print ('Recall :',Recall)



array = [[TruePositive,FalsePositive],
         [FalseNegative,TrueNegative]]        
df_cm = pd.DataFrame(array, ['Predicted condition positive','Predicted condition negative'],
                    ['Condition positive','Condition negative'])
#plt.figure(figsize = (10,7))
sn.set(font_scale=1.4)#for label size
sn.heatmap(df_cm, annot=True,annot_kws={"size": 16})# font size

"""#### SVM Correlation"""

dataset1=[]; target1=[]
for pair in sameCars:
  try:
    dataset1.append(np.concatenate((featureExtract(pair[0]), featureExtract(pair[1])), axis=0))
    target1.append(0)
  except: pass



for pair in differentCars:
  try:
    dataset1.append(np.concatenate((featureExtract(pair[0]), featureExtract(pair[1])), axis=0))
    target1.append(1)
  except: pass


dataset1= np.array(dataset1)
target1= np.array(target1)



print (dataset1.shape, target1.shape)
X_train, X_test, y_train, y_test = train_test_split(dataset1, target1, test_size=0.3,random_state=19) # 70% training and 30% test
print (X_train.shape, y_train.shape)

from sklearn import svm

#Create a svm Classifier
clf = svm.SVC(kernel='linear') 

# clf = svm.SVC(kernel='rbf') 

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

TruePositive,FalseNegative,TrueNegative,FalsePositive=0,0,0,0


for i in range(len(y_test)):
  if y_test[i]==0:
    if y_pred[i]==0:
      TruePositive+=1
    else:
      FalseNegative+=1
  else:
    if y_pred[i]==1:
      TrueNegative+=1
    else:
      FalsePositive+=1

    
Precision = (TruePositive+1)/(1+TruePositive+FalsePositive)
Recall = TruePositive/(TruePositive+FalseNegative)


print ('Precision :',Precision)
print ('Recall :',Recall)



array = [[TruePositive,FalsePositive],
         [FalseNegative,TrueNegative]]        
df_cm = pd.DataFrame(array, ['Predicted condition positive','Predicted condition negative'],
                    ['Condition positive','Condition negative'])
#plt.figure(figsize = (10,7))
sn.set(font_scale=1.4)#for label size
sn.heatmap(df_cm, annot=True,annot_kws={"size": 16})# font size

dataset1=[]; target1=[]
for pair in sameCars:
  try:
    f1=featureExtract(pair[0])
    f2=featureExtract(pair[1])
    dataset1.append(np.concatenate((f1+f2, abs(f1-f2)), axis=0))
    target1.append(0)
  except: pass


for pair in differentCars:
  try:
    f1=featureExtract(pair[0])
    f2=featureExtract(pair[1])
    dataset1.append(np.concatenate((f1+f2, abs(f1-f2)), axis=0))
    target1.append(1)
  except: pass

dataset1= np.array(dataset1)
target1= np.array(target1)



print (dataset1.shape, target1.shape)

X_train, X_test, y_train, y_test = train_test_split(dataset1, target1, test_size=0.3,random_state=19) # 70% training and 30% test

clf = svm.SVC(kernel='linear') 

# clf = svm.SVC(kernel='rbf') 

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

TruePositive,FalseNegative,TrueNegative,FalsePositive=0,0,0,0


for i in range(len(y_test)):
  if y_test[i]==0:
    if y_pred[i]==0:
      TruePositive+=1
    else:
      FalseNegative+=1
  else:
    if y_pred[i]==1:
      TrueNegative+=1
    else:
      FalsePositive+=1

    
Precision = (TruePositive+1)/(1+TruePositive+FalsePositive)
Recall = TruePositive/(TruePositive+FalseNegative)


print ('Precision :',Precision)
print ('Recall :',Recall)



array = [[TruePositive,FalsePositive],
         [FalseNegative,TrueNegative]]        
df_cm = pd.DataFrame(array, ['Predicted condition positive','Predicted condition negative'],
                    ['Condition positive','Condition negative'])
#plt.figure(figsize = (10,7))
sn.set(font_scale=1.4)#for label size
sn.heatmap(df_cm, annot=True,annot_kws={"size": 16})# font size

